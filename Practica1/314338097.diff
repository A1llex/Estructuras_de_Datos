diff --git a/src/main/java/mx/unam/ciencias/edd/Lista.java b/src/main/java/mx/unam/ciencias/edd/Lista.java
index d55b73b..6a849db 100644
--- a/src/main/java/mx/unam/ciencias/edd/Lista.java
+++ b/src/main/java/mx/unam/ciencias/edd/Lista.java
@@ -27,7 +27,7 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nodo con un elemento. */
         public Nodo(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
     }
 
@@ -40,37 +40,50 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nuevo iterador. */
         public Iterador() {
-            // Aquí va su código.
+            anterior = null;
+            siguiente = cabeza;
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return (siguiente != null);
         }
 
         /* Nos da el elemento siguiente. */
         @Override public T next() {
-            // Aquí va su código.
+            if(! hasNext())
+                throw new NoSuchElementException();
+            //mueve las referencias y regresa el elemento en el que estabamos antes de movernos
+            anterior = siguiente;
+            siguiente = siguiente.siguiente;
+            return anterior.elemento;
         }
 
         /* Nos dice si hay un elemento anterior. */
         @Override public boolean hasPrevious() {
-            // Aquí va su código.
+            return (anterior != null);
         }
 
         /* Nos da el elemento anterior. */
         @Override public T previous() {
-            // Aquí va su código.
+            if(! hasPrevious())
+                throw new NoSuchElementException(); 
+            //mueve las referencias y regresa el elemento en el que estabamos antes de movernos
+            siguiente = anterior;
+            anterior = anterior.anterior;
+            return siguiente.elemento;
         }
 
         /* Mueve el iterador al inicio de la lista. */
         @Override public void start() {
-            // Aquí va su código.
+            anterior = null;
+            siguiente = cabeza;
         }
 
         /* Mueve el iterador al final de la lista. */
         @Override public void end() {
-            // Aquí va su código.
+            anterior = rabo;
+            siguiente = null;
         }
     }
 
@@ -87,7 +100,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -96,7 +109,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return el número elementos en la lista.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -105,7 +118,7 @@ public class Lista<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+        return (cabeza == null);
     }
 
     /**
@@ -117,7 +130,7 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        agregaFinal(elemento);
     }
 
     /**
@@ -128,7 +141,18 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaFinal(T elemento) {
-        // Aquí va su código.
+        if (elemento == null) 
+            throw new IllegalArgumentException();
+        Nodo nuevo = new Nodo(elemento);
+        if (esVacia()) {
+            cabeza = rabo = nuevo;
+            longitud++;
+        }else {
+            rabo.siguiente = nuevo;
+            nuevo.anterior = rabo;
+            rabo = nuevo;
+            longitud++;
+        }
     }
 
     /**
@@ -139,7 +163,18 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaInicio(T elemento) {
-        // Aquí va su código.
+        if (elemento == null)
+            throw new IllegalArgumentException();
+        Nodo nuevo = new Nodo(elemento);
+        if (esVacia()) {
+            cabeza = rabo = nuevo;
+            longitud++;
+        }else {
+            cabeza.anterior = nuevo;
+            nuevo.siguiente = cabeza;
+            cabeza = nuevo;
+            longitud++;
+        }
     }
 
     /**
@@ -158,7 +193,28 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void inserta(int i, T elemento) {
-        // Aquí va su código.
+        if ((elemento == null)) 
+            throw new IllegalArgumentException();
+        Nodo nuevo = new Nodo(elemento);
+        if (esVacia()) {
+            cabeza = rabo = nuevo;
+            longitud++;
+        }else if (i >= longitud) {
+            agregaFinal(elemento);
+        }else if ((i <= 0)) {
+            agregaInicio(elemento);
+        }else {
+            Nodo aux;
+            aux = cabeza;
+            for (int j=0;j<i;j++) {
+                aux = aux.siguiente;
+            }
+            nuevo.anterior = aux.anterior;
+            nuevo.siguiente = aux;
+            aux.anterior.siguiente = nuevo;
+            aux.anterior = nuevo;
+            longitud ++;
+        }
     }
 
     /**
@@ -167,7 +223,24 @@ public class Lista<T> implements Coleccion<T> {
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+        if ((elemento == null)||(esVacia()))
+            return;
+        if (cabeza.elemento.equals(elemento)) {
+            eliminaPrimero();
+        }else {
+            Nodo aux = cabeza;
+            while (aux != rabo) {
+                if (aux.elemento.equals(elemento)) {
+                    aux.anterior.siguiente = aux.siguiente;
+                    aux.siguiente.anterior = aux.anterior;
+                    longitud--;
+                    return;
+                }
+                aux = aux.siguiente;
+            }
+            if (aux.elemento.equals(elemento)) 
+                eliminaUltimo();
+        }
     }
 
     /**
@@ -176,7 +249,19 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaPrimero() {
-        // Aquí va su código.
+        if (esVacia()) 
+            throw new NoSuchElementException();
+        T elem = cabeza.elemento;
+        if (cabeza ==  rabo) {
+            cabeza = rabo = null;
+            longitud--;
+            return elem;
+        }else{
+            cabeza = cabeza.siguiente;
+            cabeza.anterior = null;
+            longitud--;
+            return elem;
+        }
     }
 
     /**
@@ -185,7 +270,19 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaUltimo() {
-        // Aquí va su código.
+        if (esVacia()) 
+            throw new NoSuchElementException();
+        T elem = rabo.elemento;
+        if (cabeza ==  rabo) {
+            cabeza = rabo = null;
+            longitud--;
+            return elem;
+        }else{
+            rabo = rabo.anterior;
+            rabo.siguiente = null;
+            longitud--;
+            return elem;
+        }
     }
 
     /**
@@ -195,7 +292,17 @@ public class Lista<T> implements Coleccion<T> {
      *         <tt>false</tt> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+        if ((elemento==null)||(esVacia())) 
+            return false;
+        Nodo aux;
+        aux = cabeza;
+        while (aux != null) {
+            if (aux.elemento.equals(elemento)) {
+                return true;
+            }
+            aux = aux.siguiente;
+        }
+        return false;
     }
 
     /**
@@ -203,7 +310,13 @@ public class Lista<T> implements Coleccion<T> {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista<T> reversa() {
-        // Aquí va su código.
+        Lista<T> rev = new Lista<T>();
+        Nodo aux = cabeza;
+        while (aux != null) {
+            rev.agregaInicio(aux.elemento);
+            aux = aux.siguiente;    
+        }
+        return rev;
     }
 
     /**
@@ -212,14 +325,21 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copiad de la lista.
      */
     public Lista<T> copia() {
-        // Aquí va su código.
+        Lista<T> cop = new Lista<T>();
+        Nodo aux = cabeza;
+        while (aux != null) {
+            cop.agregaFinal(aux.elemento);
+            aux = aux.siguiente;    
+        }
+        return cop;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        cabeza = rabo = null;
+        longitud = 0;
     }
 
     /**
@@ -228,7 +348,9 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getPrimero() {
-        // Aquí va su código.
+        if (esVacia()) 
+            throw new NoSuchElementException();
+        return cabeza.elemento;
     }
 
     /**
@@ -237,7 +359,9 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getUltimo() {
-        // Aquí va su código.
+        if (esVacia()) 
+            throw new NoSuchElementException();
+        return rabo.elemento;
     }
 
     /**
@@ -248,7 +372,13 @@ public class Lista<T> implements Coleccion<T> {
      *         igual que el número de elementos en la lista.
      */
     public T get(int i) {
-        // Aquí va su código.
+        if ((i<0)||(i>=longitud)) 
+            throw new ExcepcionIndiceInvalido();
+        Nodo aux = cabeza;
+        for (int j=0;j<i;j++) {
+            aux = aux.siguiente;
+        }
+        return aux.elemento;
     }
 
     /**
@@ -258,7 +388,18 @@ public class Lista<T> implements Coleccion<T> {
      *         no está contenido en la lista.
      */
     public int indiceDe(T elemento) {
-        // Aquí va su código.
+        if (esVacia()||(elemento==null)) 
+            return -1;
+        Nodo aux = cabeza;
+        int cont = 0;
+        while (aux != null) {
+            if (aux.elemento.equals(elemento)) {
+                return cont;
+            }
+            cont++;
+            aux = aux.siguiente;
+        }
+        return -1;
     }
 
     /**
@@ -266,7 +407,16 @@ public class Lista<T> implements Coleccion<T> {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        if (esVacia()) 
+            return "[]";
+        Nodo aux = cabeza;
+        String cadena="";
+        while (aux != rabo) {
+            cadena+= String.valueOf(aux.elemento) + ", ";
+            aux = aux.siguiente;
+        }
+        cadena+= String.valueOf(aux.elemento);
+        return ("["+cadena+"]");
     }
 
     /**
@@ -279,7 +429,18 @@ public class Lista<T> implements Coleccion<T> {
         if (objeto == null || getClass() != objeto.getClass())
             return false;
         @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
-        // Aquí va su código.
+        //lo que hace es rervisar si la longitud de las listas es igual si no novale la pena comparar las listas
+        if (longitud == lista.getLongitud()) {
+            Nodo aux = cabeza;
+            for (int i=0;aux!=null;i++) {
+                //lo que hay que hacer es revisar que cada elemento de las dos listas sean el mismo
+                if (!aux.elemento.equals(lista.get(i)))
+                    return false;
+                aux = aux.siguiente;
+            }
+            return true;
+        }
+        return false;
     }
 
     /**
